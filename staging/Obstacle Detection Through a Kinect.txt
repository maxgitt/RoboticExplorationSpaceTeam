# Obstacle Detection Through a Kinect

------------------------------------------------------------------------------------------------------------------------------
METHOD #1: Point Cloud Analysis - Time Intensive
------------------------------------------------------------------------------------------------------------------------------
Method:

1) [Data Acquisition] : Obtain point cloud
	- Combine RGB color values with depth values if not done already
	- Kinect depth range: 0.4m to 3.5m
	- Kinect FPS: 30 FPS
	- Resolution: 640 x 480 pixels
	- Defined in reference frame of kinect - check if translation of reference frame necessary

2) [Filtering] : Point Cloud Reduction
	- Reduce points to improve algorithmic efficiency
	- Possible this is unecessary due to computer power
	- Downsample point cloud
		- Voxel Grid Filter
		- http://wiki.ros.org/pcl_ros/Tutorials/VoxelGrid%20filtering
		- http://pointclouds.org/documentation/tutorials/voxel_grid.php
	- Reduce pixel/image width 
		- Passthrough Filter
			- Reduce points greater than 1.5x the rover width 
			- http://wiki.ros.org/pcl_ros/Tutorials/PassThrough%20filtering
			- http://pointclouds.org/documentation/tutorials/passthrough.php

3) [Segmentation] : Plane Detection
	- NO ROS IMPLEMENTATION & MOST IMPORTANT ALGORITHM (RANSAC)
	- Need to detect ground plane
	- RANSAC Algorithm - Random sample consensus
		- Attempt to use point cloud points to fit points that satisfy equation of a plane
		- https://en.wikipedia.org/wiki/Random_sample_consensus
		- Python: https://github.com/FredrikAppelros/ransac
	- Weighted Least Squares
		- Use weighted least squares to remove bad points
		- Assume points left are useful
		- http://www.itl.nist.gov/div898/handbook/pmd/section4/pmd432.htm

4) [Obstacle Detection]
	- Detect obstacles as compared to ground plane - difference in depth
	- Euclidean Cluster Extraction
		- Determines clusters on the ground plane where depth varies significantly from ground plane
		- http://stackoverflow.com/questions/35708272/how-to-extract-a-specific-cluster-after-filtering-a-point-cloud
		- http://www.pointclouds.org/documentation/tutorials/cluster_extraction.php
		- http://answers.ros.org/question/202122/possibility-of-using-pcl-euclidean-cluster-extraction-for-object-detection/

------------------------------------------------------------------------------------------------------------------------------
Remaining Concerns:
	- How do you throw out wall detection at all
	- Unit test algorithms - can we use prewritten implementations of algorithms?
	- Verify ROS feasability & compatability
	- Verify time feasability

Articles of note:
	- Real-Time Obstacle Detection System in Indoor Environment for the Visually Impaired Using Microsoft Kinect Sensor
		- https://www.hindawi.com/journals/js/2016/3754918/


------------------------------------------------------------------------------------------------------------------------------
METHOD #2: Point Cloud Differentiation - Possible???
------------------------------------------------------------------------------------------------------------------------------
Definitions/Notes:
- An organised point cloud is organized as a 2D array of points with the same properties you'd expect if the points were obtained from a projective camera, like the Kinect, DepthSense or SwissRanger. In PCL the points array of a point cloud is actually a 2D array but one of those dimensions is only used for representing organised point clouds.
	- Organized point cloud data use 2d array for do future implementations.unorganized point cloud data, height = 1. This is 1D array.
	- In both organised and unorganised point clouds, all of X Y and Z are provided for each point, but the memory layout of organised point clouds is that of a 2D array. The memory layout of the points then is closely related to the spatial layout as represented by these XYZ values.
- An octree is a tree data structure in which each internal node has exactly eight children. 
	- Octrees are most often used to partition a three-dimensional space by recursively subdividing it into eight octants. 
	- Consider: A square divided into quadrants has four parts, divide it each quadrant has 4 children.
		- Three dimensionally, that same square becomes a cube. That cube is divided into quadrants which results in eight parts. Each quadrant, when divided again has 8 children as well. 
- A voxel represents a value on a regular grid in three-dimensional space
	- Consider: A pixel defines the position in a two dimensional space - the voxel is analogous to this. 

------------------------------------------------------------------------------------------------------------------------------
Method:

1) [Control Detection] : Obtain base point cloud that all others will be compared to. (Cloud A)
	- Obtain base point cloud from known obstacle free arear
	- Convert into Octrees
	- Store octree safely for use in comparison with all other octrees

2) [Obstacle Detection] : Obtain point cloud for data (continuously in loop) while in obstacle area (Cloud B)
	- Obtain point cloud
	- Convert into Octree

3) [Comparison] : Compare point clouds
	- Option A: Compare the two point clouds by iterating through the octrees. 
	- Option B: Compare the octrees using PCL functions
		- Obtain the voxels that exist in the second point cloud from obstacle area and create a vector of voxels in cloud B but not cloud A.

4) [Detection] : Characterize Actual Points of Concern
	- Iterate through vector, and check whether z value passes threshold.
	- Recreate vector of (x,y) coordinates where points indicate actual concern

5) [Publishing] : Publish data
	- Iterate through (x,y) vector and publish points. 
	- Consider need for transform
	- Consider need for possibly converting to vector field

------------------------------------------------------------------------------------------------------------------------------
Links:
- http://pointclouds.org/documentation/tutorials/octree_change.php#octree-change-detection

